- import diskuto.web : DiskutoWeb;
- import diskuto.internal.webutils : Comment, getCommentsContext;
- import vibe.web.web : trWeb;
- import core.time : minutes;
- import fuzzydate : toFuzzyDate;

- void commentForm(string topic, Comment* comment)
	- string name, email, website;
	- if (req.session)
		- name = req.session.get("diskuto.name", "");
		- email = req.session.get("diskuto.email", "");
		- website = req.session.get("diskuto.website", "");

	form.reply-form(method="POST", action="#{req.rootDir}diskuto", onSubmit="return confirmReply(this)")
		input(type="hidden", name="topic", value=topic)
		input(type="hidden", name="reply_to", value=comment ? comment.id : "")
		- auto ph = comment ? trWeb("Type here to reply.") : trWeb("Type here to leave a comment.");
		textarea(name="text", rows=3, placeholder=ph, onfocus="updateFormSnap(this)", onblur="updateFormSnap(this)", onchange="updateFormSnap(this)", onkeydown="updateFormSnap(this)", onkeyup="updateFormSnap(this)", autocomplete="off")
		input(type="text", name="name", value=name, placeholder=trWeb("Name (optional)"))
		input(type="text", name="email", value=email, placeholder=trWeb("Email (optional)"), title=trWeb("Used for notifications and avatar image only"))
		input(type="text", name="website", value=website, placeholder=trWeb("Website (optional)"))
		button(type="submit")& Submit

- void renderCommentRec(string topic, string uid, Comment* comment)
	.comment(id=comment.id)
		- import diskuto.avatar : generateAvatar;
		- import std.algorithm.searching : canFind;

		- generateAvatar(&_diet_output, comment.avatarID);
		.right
			- if (comment.website.length && comment.name.length)
				a.author(href=comment.website)= comment.name
			- else if (comment.name.length)
				span.author= comment.name
			- else
				span.author& Anonymous
			a.date(href="\##{comment.id}", title=comment.time)= toFuzzyDate(comment.time)

			include diskuto.inc.commentContents

			.error
			
			form.edit(method="POST", action="#{req.rootDir}ts/edit", onSubmit="return confirmEdit(this)")
				input(type="hidden", name="id", value=comment.id)
				textarea(name="text", rows=3, autocomplete="off")= comment.text
				button(type="button", onClick="cancelEdit(this)")& Cancel
				button(type="submit")& Submit
		
			form.delete(method="POST", action="#{req.rootDir}ts/delete", onSubmit="return confirmDelete(this)")
				input(type="hidden", name="id", value=comment.id)
				p& Do you really want to delete this comment?
				button(type="button", onClick="cancelDelete(this)")& Cancel
				button(type="submit")& Confirm

		.action-bar
			- bool have_upvoted = uid.length && comment.upvotes.canFind(uid);
			- bool have_downvoted = uid.length && comment.downvotes.canFind(uid);
			- bool vote_disabled = have_upvoted || have_downvoted || comment.userID == uid;
			- auto vote_total = cast(long)comment.upvotes.length - cast(long)comment.downvotes.length;
			
			form.vote-up(method="POST", action="#{req.rootDir}diskuto/up", onSubmit="return vote(this, 1)")
				input(type="hidden", name="id", value=comment.id)
				button(type="submit", disabled=vote_disabled, class=have_upvoted ? "chosen" : "") ▲
			.vote-count(class=vote_total<0?"neg":vote_total>0?"pos":"bal")= vote_total
			form.vote-down(method="POST", action="#{req.rootDir}diskuto/down", onSubmit="return vote(this, -1)")
				input(type="hidden", name="id", value=comment.id)
				button(type="submit", disabled=vote_disabled, class=have_downvoted ? "chosen" : "") ▼
			
			- if (comment.userID == uid && comment.age < 5.minutes)
				button.edit-button(type="button", onClick="showEdit(this)")& Edit
				button.delete-button(type="button", onClick="showDelete(this)")& Delete

			- commentForm(topic, comment);

		.replies
			- foreach (c; comment.replies)
				- if (c.isVisibleTo(uid))
					- renderCommentRec(topic, uid, c);

- void includeDiskuto(DiskutoWeb web, string topic)
	.diskuto
		- auto ctx = getCommentsContext(web, topic);
		- auto uid = web.uid;

		style @import url('#{req.rootDir}diskuto.css');
		script(src="#{req.rootDir}diskuto.js")
		script window.diskutoBaseURL = "#{req.rootDir}diskuto";
		noscript: style @import url('#{req.rootDir}diskuto-noscript.css');

		p& #{ctx.commentCount} comments

		.error= req.query.get("diskuto-error", "")

		- commentForm(topic, null);

		.replies
			- foreach (c; ctx.comments)
				- if (c.isVisibleTo(uid))
					- renderCommentRec(topic, uid, c);
